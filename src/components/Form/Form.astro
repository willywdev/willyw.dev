---
import sendGrid from "@sendgrid/mail";

sendGrid.setApiKey(import.meta.env.SENDGRID_API_KEY);

function sanitizeHTML(code) {
  if (code.includes("<img")) {
    return "Sanitized by Server";
  } else {
    return code;
  }
}

if (Astro.request.method === "POST") {
  try {
    // Getting posted data from our contact form
    const data = await Astro.request.formData();
    const name = data.get("name");
    const email = data.get("email");
    const message = data.get("message");

    // TODO: Do not forget to do validation and error handling over received data from your contact form.

    // Sending email
    const msg = {
      to: "kontakt@willyw.dev", // Change to your recipient
      from: "kontakt@willyw.dev", // Change to your verified sender
      replyTo: { email: email, name: name },
      subject: `Contact form submission from ${name}`,
      text: message,
      html: `<strong>Send by ${email}</strong><br>
            ${sanitizeHTML(message)}`,
    };
    await sendGrid
      .send(msg)
      .then(() => {
        console.log("Email sent");
      })
      .catch((error) => {
        console.error(error);
      });
  } catch (error) {
    console.error(error);
  }
}
---

<form method="POST" class="form">
  <div class="form__wrapper">
    <label for="name">Your name:</label>
    <input type="text" name="name" id="name" required />
  </div>
  <div class="form__wrapper">
    <label for="email">Your email:</label>
    <input type="email" name="email" id="email" required />
  </div>
  <label for="message">Your message:</label>
  <textarea name="message" id="message" cols="30" rows="10" required></textarea>
  <button type="submit" class="form__submit-btn">Send</button>
</form>

<style>
  .form {
    margin: 0 1rem 1rem 1rem;
    display: flex;
    flex-direction: column;

    width: 100%;
    padding: 1rem;
    background-color: #23262d;
    background-image: none;
    background-size: 400%;
    border-radius: 7px;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
    position: relative;
  }
  .form__wrapper {
    display: flex;
    flex-direction: column;
    gap: 0.1rem;
    margin-bottom: 0.4rem;
  }
  input {
    opacity: 0.8;
    border-radius: 5px;
    outline: none;
    border: none;
    height: 1.5rem;
    padding-left: 5px;
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
    border-bottom: 2px solid transparent;
  }
  input:focus {
    opacity: 0.9;
    border-bottom: 2px solid rgb(var(--accent));
  }
  textarea:focus {
    opacity: 0.9;
    border-bottom: 2px solid rgb(var(--accent));
  }
  textarea {
    opacity: 0.8;
    border-radius: 5px;
    outline: none;
    border: none;
    padding-left: 3px;
    padding-top: 3px;
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
    border-bottom: 2px solid transparent;
  }
  label {
    font-size: 1.1rem;
  }
  .form__submit-btn {
    width: 6rem;
    height: 2rem;
    margin: 0 auto;
    margin-top: 1rem;
    outline: none;
    border: none;
    border-radius: 8px;
    color: white;
    background: rgba(255, 255, 255, 0.05);
    outline: 2px solid rgba(255, 255, 255, 0.4);
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 0.9rem;
  }
  .form__submit-btn:is(:hover, :active) {
    outline: 2px solid rgb(var(--accent));
  }
</style>
